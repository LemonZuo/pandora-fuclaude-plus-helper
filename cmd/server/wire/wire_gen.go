// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"PandoraFuclaudePlusHelper/config"
	"PandoraFuclaudePlusHelper/internal/handler"
	"PandoraFuclaudePlusHelper/internal/middleware"
	"PandoraFuclaudePlusHelper/internal/repository"
	"PandoraFuclaudePlusHelper/internal/server"
	"PandoraFuclaudePlusHelper/internal/service"
	"PandoraFuclaudePlusHelper/pkg/app"
	"PandoraFuclaudePlusHelper/pkg/jwt"
	"PandoraFuclaudePlusHelper/pkg/log"
	server2 "PandoraFuclaudePlusHelper/pkg/server"
	"PandoraFuclaudePlusHelper/pkg/server/http"
	"PandoraFuclaudePlusHelper/pkg/server/reverse/claude"
	"PandoraFuclaudePlusHelper/pkg/server/reverse/openai"
	"PandoraFuclaudePlusHelper/pkg/sid"
	"github.com/google/wire"
)

// Injectors from wire.go:

func NewWire(logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt()
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(logger)
	repositoryRepository := repository.NewRepository(logger, db)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	openaiTokenRepository := repository.NewOpenaiTokenRepository(repositoryRepository)
	openaiAccountRepository := repository.NewOpenaiAccountRepository(repositoryRepository)
	claudeTokenRepository := repository.NewClaudeTokenRepository(repositoryRepository)
	claudeAccountRepository := repository.NewClaudeAccountRepository(repositoryRepository)
	loginService := service.NewLoginService(serviceService, userRepository, openaiTokenRepository, openaiAccountRepository, claudeTokenRepository, claudeAccountRepository)
	loginHandler := handler.NewLoginHandler(handlerHandler, loginService)
	coordinator := service.NewServiceCoordinator(serviceService, openaiTokenRepository, openaiAccountRepository, claudeTokenRepository, claudeAccountRepository)
	openaiAccountService := service.NewOpenaiAccountService(serviceService, openaiTokenRepository, openaiAccountRepository, coordinator)
	openaiAccountHandler := handler.NewOpenaiAccountHandler(handlerHandler, openaiAccountService)
	openaiTokenService := service.NewOpenaiTokenService(serviceService, openaiTokenRepository, openaiAccountRepository, coordinator)
	openaiTokenHandler := handler.NewOpenaiTokenHandler(handlerHandler, openaiTokenService)
	userService := service.NewUserService(serviceService, userRepository, openaiTokenRepository, openaiAccountRepository, claudeTokenRepository, claudeAccountRepository, coordinator)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	claudeTokenService := service.NewClaudeTokenService(serviceService, claudeTokenRepository, claudeAccountRepository, coordinator)
	claudeTokenHandler := handler.NewClaudeTokenHandler(handlerHandler, claudeTokenService)
	claudeAccountService := service.NewClaudeAccountService(serviceService, claudeTokenRepository, claudeAccountRepository, coordinator)
	claudeAccountHandler := handler.NewClaudeAccountHandler(handlerHandler, claudeAccountService)
	httpServer := server.NewHTTPServer(logger, jwtJWT, loginHandler, openaiAccountHandler, openaiTokenHandler, userHandler, claudeTokenHandler, claudeAccountHandler)
	conversationRepository := repository.NewConversationRepository(repositoryRepository)
	conversationLoggerMiddleware := middleware.NewConversationLoggerMiddleware(logger, conversationRepository)
	openaiServer := server.NewChatGPTReverseProxyServer(logger, conversationLoggerMiddleware)
	claudeServer := server.NewClaudeReverseProxyServer(logger, conversationLoggerMiddleware)
	job := server.NewJob(logger)
	task := server.NewTask(logger, openaiTokenRepository, openaiAccountRepository, claudeTokenRepository, claudeAccountRepository, userRepository, openaiAccountService, claudeAccountService)
	migrate := server.NewMigrate(db, logger)
	appApp := newApp(httpServer, openaiServer, claudeServer, job, task, migrate)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, repository.NewOpenaiTokenRepository, repository.NewOpenaiAccountRepository, repository.NewClaudeTokenRepository, repository.NewClaudeAccountRepository, repository.NewConversationRepository, repository.NewUserRepository)

var serviceCoordinatorSet = wire.NewSet(service.NewServiceCoordinator)

var serviceSet = wire.NewSet(service.NewService, serviceCoordinatorSet, service.NewLoginService, service.NewUserService, service.NewOpenaiTokenService, service.NewOpenaiAccountService, service.NewClaudeTokenService, service.NewClaudeAccountService, server.NewTask)

var migrateSet = wire.NewSet(server.NewMigrate)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewLoginHandler, handler.NewUserHandler, handler.NewOpenaiTokenHandler, handler.NewOpenaiAccountHandler, handler.NewClaudeTokenHandler, handler.NewClaudeAccountHandler)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewChatGPTReverseProxyServer, server.NewClaudeReverseProxyServer, server.NewJob)

// build App
func newApp(httpServer *http.Server, openaiServer *openai.Server, claudeServer *claude.Server, job *server.Job, task *server.Task, migrate *server.Migrate) *app.App {
	servers := []server2.Server{
		httpServer,
		job,
		migrate,
		openaiServer,
		claudeServer,
	}
	if config.GetConfig().EnableTask {
		servers = append(servers, task)
	}
	return app.NewApp(app.WithServer(servers...), app.WithName("demo-server"))
}
